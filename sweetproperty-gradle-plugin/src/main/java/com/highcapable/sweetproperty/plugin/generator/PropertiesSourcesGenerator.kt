/*
 * SweetProperty -  An easy get project properties anywhere Gradle plugin
 * Copyright (C) 2019-2023 HighCapable
 * https://github.com/HighCapable/SweetProperty
 *
 * Apache License Version 2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * This file is Created by fankes on 2023/8/27.
 */
package com.highcapable.sweetproperty.plugin.generator

import com.highcapable.sweetproperty.SweetProperty
import com.highcapable.sweetproperty.plugin.config.proxy.ISweetPropertyConfigs
import com.highcapable.sweetproperty.plugin.generator.factory.PropertyMap
import com.highcapable.sweetproperty.plugin.generator.factory.parseTypedValue
import com.highcapable.sweetproperty.utils.debug.SError
import com.highcapable.sweetproperty.utils.firstNumberToLetter
import com.highcapable.sweetproperty.utils.underscore
import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import java.text.SimpleDateFormat
import java.util.*

/**
 * 属性键值代码生成实现类
 */
internal class PropertiesSourcesGenerator {

    /**
     * 生成 [FileSpec]
     * @param configs 当前配置实例
     * @param keyValues 键值数组
     * @param packageName 包名
     * @param className 类名
     * @return [FileSpec]
     * @throws IllegalStateException 如果生成失败
     */
    internal fun build(
        configs: ISweetPropertyConfigs.ISourcesCodeGenerateConfigs,
        keyValues: PropertyMap,
        packageName: String,
        className: String
    ) = runCatching {
        FileSpec.builder(packageName, className).apply {
            addType(TypeSpec.objectBuilder(className).apply {
                addKdoc(
                    """
                      This class is generated by ${SweetProperty.TAG} at ${SimpleDateFormat.getDateTimeInstance().format(Date())}
                      
                      The content here is automatically generated according to the properties of your projects
                      
                      You can visit [here](${SweetProperty.PROJECT_URL}) for more help
                    """.trimIndent()
                )
                if (configs.isEnableRestrictedAccess) addModifiers(KModifier.INTERNAL)
                keyValues.forEach { (key, value) ->
                    val typedValue = value.parseTypedValue(configs.isEnableTypeAutoConversion)
                    addProperty(PropertySpec.builder(key.firstNumberToLetter().underscore(), typedValue.first).apply {
                        addKdoc("Resolve the \"$key\" value \"$value\"")
                        if (configs.isEnableRestrictedAccess) addModifiers(KModifier.INTERNAL)
                        addModifiers(KModifier.CONST)
                        initializer(typedValue.second.toKotlinPoetSpace())
                    }.build())
                }
            }.build())
        }.build()
    }.getOrElse { SError.make("Failed to generated Kotlin file\n$it") }

    /**
     * 转换到 KotlinPoet 声明的空格
     * @return [String]
     */
    private fun String.toKotlinPoetSpace() = replace(" ", "·")
}